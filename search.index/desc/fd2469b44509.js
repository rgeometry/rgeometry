rd_("AhReturn Euler\xe2\x80\x99s number.00CoA constant <code>Complex</code> <em>i</em>, the imaginary unit.0BhThe type sampled by this implementation.AkReturns the imaginary unit.0BnReturn Archimedes\xe2\x80\x99 constant <code>\xcf\x80</code>.00BgImaginary portion of the complex numberBiReturns the imaginary part of the number.1110111AgLittle-Endian utilitiesBlReturns the natural logarithm of the number.DgComputes the principal value of natural logarithm of <code>self</code>.111110111BbReal portion of the complex numberBdReturns the real part of the number.1110111CmUnary operator for retrieving the multiplicative inverse, \xe2\x80\xa600EhThe base trait for numeric types, covering <code>0</code> and <code>1</code> values, \xe2\x80\xa600BbA constant <code>Complex</code> 1.DiThe multiplicative identity element of <code>Self</code>, <code>1</code>.0BbA constant <code>Ratio</code> 1/1.201D`Defines a multiplicative identity element for <code>Self</code>.000BoBinary operator for raising a value to a power.0000DhAn automatically-implemented extension trait on <code>RngCore</code> \xe2\x80\xa6C`Return the full circle constant <code>\xcf\x84</code>.00BoReturns the absolute value of the given number.AlComputes the absolute value.EgComputes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> \xe2\x80\xa61CfReturns the absolute value of the number. See also \xe2\x80\xa62121CmComputes the absolute value of <code>self</code>. Returns \xe2\x80\xa623312033220BdCalculate the principal Arg of self.BdComputes the argument of the number.01CoConvert a value to another, using the <code>as</code> operator.000DjReturns whether the bit in position <code>bit</code> is set, using the \xe2\x80\xa6CdReturns whether the bit in the given position is set10E`Create a new <code>Complex&lt;f32&gt;</code> with arguments that can convert \xe2\x80\xa60E`Create a new <code>Complex&lt;f64&gt;</code> with arguments that can convert \xe2\x80\xa60DiCreate a new Complex with a given phase: <code>exp(i * phase)</code>. \xe2\x80\xa60BmComputes the cosine of a number (in radians).BiComputes the cosine of <code>self</code>.111110111AgDecrements self by one.00CjReturns <code>e^(self)</code>, (the exponential function).EcComputes <code>e^(self)</code>, where <code>e</code> is the base of the natural \xe2\x80\xa6111110111AnGreatest Common Divisor (GCD).CnCalculates the Greatest Common Divisor (GCD) of the number \xe2\x80\xa60010001DhReturn a random value supporting the <code>Standard</code> distribution.0AgIncrements self by one.00AkReturns <code>1/self</code>ChReturns the multiplicative inverse of <code>self</code>.010AmLowest Common Multiple (LCM).CmCalculates the Lowest Common Multiple (LCM) of the number \xe2\x80\xa60010001CjReturns the logarithm of the number with respect to an \xe2\x80\xa6DkReturns the logarithm of <code>self</code> with respect to an arbitrary \xe2\x80\xa6111110111CmCreate a distribution of values of \xe2\x80\x98S\xe2\x80\x99 by mapping the \xe2\x80\xa60BgReturns the maximum of the two numbers.000000000BgReturns the minimum of the two numbers.000000000BcReturns the <code>NaN</code> value.0lReturns NaN.10101AoNegate <code>Sign</code> value.0BnCreates and initializes a <code>BigInt</code>.BaCreate a new <code>Complex</code>BoCreates and initializes a <code>BigUint</code>.CiFor a given n, iterate over all binomial coefficients \xe2\x80\xa6BaCreates a new <code>Ratio</code>.42310BcCreate a <code>NotNan</code> value.DhConstruct a new <code>Bernoulli</code> with the given probability of \xe2\x80\xa6DiCreate a new <code>Slice</code> instance which samples uniformly from \xe2\x80\xa6ClConstruct self, with inclusive lower bound and exclusive \xe2\x80\xa6DkCreate a new <code>Uniform</code> instance which samples uniformly from \xe2\x80\xa6DkCreate a <code>StepRng</code>, yielding an arithmetic sequence starting \xe2\x80\xa6DhCreate a new <code>BlockRng</code> from an existing RNG implementing \xe2\x80\xa60CmDetermine the direction you have to turn if you walk from \xe2\x80\xa6fO(n^2)h$O(n^2)$210CbA collection of numeric types and traits for Rust.CdReturns the multiplicative identity, <code>1</code>.EaReturns the multiplicative identity element of <code>Self</code>, <code>1</code>.101010ClRaises a value to the power of exp, using exponentiation \xe2\x80\xa6DiRaises self to the power of <code>exp</code>, using exponentiation by \xe2\x80\xa6BeReturns <code>self ^ exponent</code>.02ChReturns <code>self</code> to the power <code>rhs</code>.320302CjRaises the <code>Ratio</code> to the power of an exponent.2203411AnSequence-related functionalityBkComputes the sine of a number (in radians).BgComputes the sine of <code>self</code>.111110111BnComputes the tangent of a number (in radians).BjComputes the tangent of <code>self</code>.111110111BjTypes which may be filled with random dataAaThe element type.BlResults element type, e.g. <code>u32</code>.AlReturn <code>ln(2.0)</code>.00ClThe type used to represent the real coefficients of this \xe2\x80\xa6CnA trait for real number types that do not necessarily have \xe2\x80\xa610BkSeed type, which is restricted to types \xe2\x80\xa60DcA <code>Sign</code> is a <code>BigInt</code>\xe2\x80\x99s composing element.0DbA constant <code>BigInt</code> with value 0, useful for static \xe2\x80\xa6BbA constant <code>Complex</code> 0.DcA constant <code>BigUint</code> with value 0, useful for static \xe2\x80\xa6DcThe additive identity element of <code>Self</code>, <code>0</code>.0BbA constant <code>Ratio</code> 0/1.42301CkDefines an additive identity element for <code>Self</code>.000CjComputes the arccosine of a number. Return value is in \xe2\x80\xa6DhComputes the principal value of the inverse cosine of <code>self</code>.111110111ChComputes the arcsine of a number. Return value is in \xe2\x80\xa6DfComputes the principal value of the inverse sine of <code>self</code>.111110111CkComputes the arctangent of a number. Return value is in \xe2\x80\xa6DkComputes the principal value of the inverse tangent of <code>self</code>\xe2\x80\xa6111110111DhDetermines the fewest bits necessary to express the <code>BigInt</code>,DkDetermines the fewest bits necessary to express the <code>BigUint</code>\xe2\x80\xa610BhCast from one machine scalar to another.0000B`Take the cubic root of a number.DjReturns the truncated principal cube root of <code>self</code> \xe2\x80\x93 see \xe2\x80\xa6DcComputes the principal value of the cube root of <code>self</code>.1CkReturns the truncated principal cube root of an integer \xe2\x80\x93033332231000333CkReturns the smallest integer greater than or equal to a \xe2\x80\xa60000AmRounds towards plus infinity.011111B`Retrieve the error code, if any.0CjReturns the complex conjugate. i.e. <code>re - i im</code>BmComputes the complex conjugate of the number.01DmThe <em>core</em> part of the RNG, implementing the <code>generate</code> \xe2\x80\xa60AkHyperbolic cosine function.CdComputes the hyperbolic cosine of <code>self</code>.111110111AnReturns <code>2^(self)</code>.AoComputes <code>2^(self)</code>.111110111DfRaises a floating point number to the complex power <code>self</code>.BaReturns <code>base^(self)</code>.01D`Returns <code>self/other</code> using floating-point operations.0CmFill any type implementing <code>Fill</code> with random data0ClReturns <code>1/self</code> using floating-point operations.0CmCreates a number from another value that can be converted \xe2\x80\xa6AoReturns the argument unchanged.000000000010000001001000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000BaCalls <code>U::from(self)</code>.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000BkReturns the base 2 logarithm of the number.D`Computes the principal value of log base 2 of <code>self</code>.111110111AlMock random number generatorA`Calculate |self|0BlRaises <code>self</code> to a complex power.000BiRaise a number to a floating point power.CcRaises <code>self</code> to a floating point power.BiRaises <code>self</code> to a real power.22BfRaise a number to a real number power.12303BcRaise a number to an integer power.CcRaises <code>self</code> to a signed integer power.011110011111CfRaises <code>self</code> to an unsigned integer power.0BfUtilities for random number generationBeRandom number generators and adaptersDcReturns the sign of the <code>BigInt</code> as a <code>Sign</code>.0AiHyperbolic sine function.CbComputes the hyperbolic sine of <code>self</code>.111110111BaTake the square root of a number.DhReturns the truncated principal square root of <code>self</code> \xe2\x80\x93 \xe2\x80\xa6DeComputes the principal value of the square root of <code>self</code>.1CmReturns the truncated principal square root of an integer \xe2\x80\xa6033332231000333AlHyperbolic tangent function.CeComputes the hyperbolic tangent of <code>self</code>.111110111BnReturns the additive identity, <code>0</code>.DkReturns the additive identity element of <code>Self</code>, <code>0</code>.101010BfError type of random number generators0BhGeneric trait for floating point numbers0000BiThe parsed float value resulted in a NaN.AmReturn <code>ln(10.0)</code>.00BhAn iterator over the range [start, stop)0BiRepresents the ratio between two numbers.0CkProvides methods to compute an integer\xe2\x80\x99s square root, \xe2\x80\xa60CfA distribution to sample items uniformly from a slice.BcInverse hyperbolic cosine function.CmComputes the principal value of inverse hyperbolic cosine \xe2\x80\xa6111110111BaInverse hyperbolic sine function.CnComputes the principal value of inverse hyperbolic sine of \xe2\x80\xa6111110111FeComputes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>\xe2\x80\xa6000000BdInverse hyperbolic tangent function.CnComputes the principal value of inverse hyperbolic tangent \xe2\x80\xa6111110111CnThe <code>BlockRngCore</code> trait and implementation helpersBjA value bounded by a minimum and a maximumBeClamps a value between a min and max.101011010BoGets an immutable reference to the denominator.0CkReturns the largest integer less than or equal to a number.0000AnRounds towards minus infinity.011111BhReturns the fractional part of a number.0000CjReturns the fractional part of a number, with division \xe2\x80\xa6011111CkCalculate the length of the hypotenuse of a right-angle \xe2\x80\xa6000000DaHelper functions for implementing <code>RngCore</code> functions.BeGet the index into the result buffer.0DhReturns <code>ln(1+n)</code> (natural logarithm) more accurately than if000000BlReturns the base 10 logarithm of the number.DaComputes the principal value of log base 10 of <code>self</code>.111110111BmGets an immutable reference to the numerator.0AoAccess point of a given vertex.0CjReturns an iterator over the given range [start, stop) \xe2\x80\xa600ClTake the reciprocal (inverse) of a number, <code>1/x</code>.DiTake the reciprocal (inverse) of a number, <code>1/x</code>. See also \xe2\x80\xa611CjReturns the reciprocal (multiplicative inverse) of the \xe2\x80\xa62AgReturns the reciprocal.2031331ClReset the number of available results. This will force a \xe2\x80\xa60CkReturns the nearest integer to a number. Round half-way \xe2\x80\xa60000CmRounds to the nearest integer. Rounds half-way cases away \xe2\x80\xa6011111CjMultiplies <code>self</code> by the scalar <code>t</code>.0DgConvert <code>self</code> to big endian from the target\xe2\x80\x99s endianness.000EeConverts the value of <code>self</code> to an <code>i8</code>. If the value cannot be0000DbConvert <code>self</code> to little endian from the target\xe2\x80\x99s \xe2\x80\xa6000EhConverts the value of <code>self</code> to a <code>u8</code>. If the value cannot be \xe2\x80\xa60000BdReturn the integer part of a number.0000AdRounds towards zero.011111AjA big signed integer type.00AlReturn <code>log2(e)</code>.00DjFused multiply-add. Computes <code>(self * a) + b</code> with only one \xe2\x80\xa600DkA wrapper around floats providing an implementation of <code>Eq</code>, \xe2\x80\xa6CfGeneric trait for types implementing basic numeric \xe2\x80\xa60DeThe trait for <code>Num</code> types which also implement numeric \xe2\x80\xa60CmA distribution to sample floating point numbers uniformly \xe2\x80\xa6BgThe result after applying the operator.0CiThe resulting type after applying the fused multiply-add.10111011DeThe trait for <code>Num</code> references which implement numeric \xe2\x80\xa60AnReturn <code>sqrt(2.0)</code>.00CnUseful functions for signed numbers (i.e. numbers that can \xe2\x80\xa6000KbConverts this <code>NotNan</code><code>&lt;</code><code>f64</code><code>&gt;</code> to a <code>NotNan</code><code>&lt;</code><code>f32</code><code>&gt;</code> while giving up \xe2\x80\xa6DfImmutably borrows from an owned value. See <code>Borrow::borrow</code>CnReturns a reference to one random element of the slice, or \xe2\x80\xa6BoChoose one element at random from the iterator.BhAdditional assertion macros for testing.B`Access cursor of a given vertex.0BoPanics if the edge isn\xe2\x80\x99t part of the polygon.0DkReturns <code>e^(self) - 1</code> in a way that is accurate even if the \xe2\x80\xa6000000E`Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.BiChecks if the given complex number is NaN111BoReturns <code>true</code> if the number is NaN.212020BoReturns <code>true</code> if the number is odd.DkReturns <code>true</code> if the number is not divisible by <code>2</code>.01001EaReturns <code>true</code> if <code>self</code> is equal to the multiplicative \xe2\x80\xa6000BlLocate a point relative to a convex polygon.0ClReturns the modular multiplicative inverse if it exists, \xe2\x80\xa6000CbReturns <code>(self ^ exponent) mod modulus</code>CaReturns <code>(self ^ exponent) % modulus</code>.10fPanics0CmDetermine the direction you have to turn if you walk from \xe2\x80\xa60BiUniformly sample a random convex polygon.0CaSample a new value, using the given distribution.0EfGenerate a random value of <code>T</code>, using <code>rng</code> as the source of \xe2\x80\xa6oSample a value.AoReturns the sign of the number.CoReturns a number that represents the sign of <code>self</code>.1101000110011000D`Squaring can be done more quickly than <code>two_product</code>.EhConverts the value of <code>self</code> to an <code>f32</code>. Overflows may map to \xe2\x80\xa60000EhConverts the value of <code>self</code> to an <code>f64</code>. Overflows may map to \xe2\x80\xa60000EgConverts the value of <code>self</code> to an <code>i16</code>. If the value cannot \xe2\x80\xa60000EgConverts the value of <code>self</code> to an <code>i32</code>. If the value cannot \xe2\x80\xa60000EgConverts the value of <code>self</code> to an <code>i64</code>. If the value cannot \xe2\x80\xa60000EeConverts the value of <code>self</code> to a <code>u16</code>. If the value cannot be0000EeConverts the value of <code>self</code> to a <code>u32</code>. If the value cannot be0000EeConverts the value of <code>self</code> to a <code>u64</code>. If the value cannot be0000ClProvides methods to compute the average of two integers, \xe2\x80\xa60AlA big unsigned integer type.00BiNumbers which have upper and lower bounds000BcA complex number in Cartesian form.00DdA distribution of values of type <code>S</code> derived from the \xe2\x80\xa6AoReturn <code>log10(2.0)</code>.00AmReturn <code>log10(e)</code>.00AoReturn <code>log2(10.0)</code>.00CaAn interface for casting between machine scalars.0000BeGeneric trait for primitive integers.000CmResults type. This is the \xe2\x80\x98block\xe2\x80\x99 an RNG implementing \xe2\x80\xa6BfThe core of a random number generator.0DnThe <code>UniformSampler</code> implementation supporting type <code>X</code>.DeA simple implementation of <code>RngCore</code> for testing purposes.BkSample values uniformly between two bounds.0BgThe positive difference of two numbers.00000000000000lReturns zero0ChSimultaneous truncated integer division and modulus. \xe2\x80\xa6BiSimultaneous integer division and modulus101CdDeprecated, use <code>is_multiple_of</code> instead.000000Cj$O(n^2)$ Polygon triangulation. Ears are selected in a \xe2\x80\xa60BhReturns epsilon, a small positive value.000000000ChConvert an integer from big endian to the target\xe2\x80\x99s \xe2\x80\xa6000DiConverts an <code>i8</code> to return an optional value of this type. \xe2\x80\xa60000CkConvert an integer from little endian to the target\xe2\x80\x99s \xe2\x80\xa6000DiConverts an <code>u8</code> to return an optional value of this type. \xe2\x80\xa60000ClGreatest Common Divisor (GCD) and Lowest Common Multiple \xe2\x80\xa6CkCalculates the Greatest Common Divisor (GCD) and Lowest \xe2\x80\xa60010001C`Returns <code>true</code> if the number is even.DgReturns <code>true</code> if the number is divisible by <code>2</code>.01001EaReturns <code>true</code> if <code>self</code> is equal to the additive identity.000DkReturns the L1 norm <code>|re| + |im|</code> \xe2\x80\x93 the Manhattan distance \xe2\x80\xa6000DjFused multiply-add. Computes <code>(self * a) + b</code> with only one \xe2\x80\xa60DePerforms the fused multiply-add operation <code>(self * a) + b</code>1011011E`Creates a <code>Ratio</code> without checking for <code>denom == 0</code> or \xe2\x80\xa60f$O(1)$0BgConvenience re-export of common membersAoReturns a reduced copy of self.0CnSets or clears the bit in the given position, using the two\xe2\x80\xa6BlSets or clears the bit in the given position10FeSets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>\xe2\x80\xa6000BaShuffle a mutable slice in place.CnSimultaneously computes the sine and cosine of the number, \xe2\x80\xa6000000EhConverts the value of <code>self</code> to an <code>i128</code>. If the value cannot \xe2\x80\xa60000EgConverts the value of <code>self</code> to a <code>u128</code>. If the value cannot \xe2\x80\xa60000ClA distribution uniformly sampling numbers within a given \xe2\x80\xa6CgDivides <code>self</code> by the scalar <code>t</code>.0DbA wrapper type implementing <code>RngCore</code> for some type \xe2\x80\xa6CcDefines an associated constant representing the \xe2\x80\xa600DcAn iterator that generates random values of <code>T</code> with \xe2\x80\xa6CiAlias for a <code>Ratio</code> of machine-sized integers.00BcA small-state, fast non-crypto PRNGCmA generic random value distribution, implemented for many \xe2\x80\xa6DiA generic trait for converting a value to a <code>BigInt</code>. This \xe2\x80\xa60BkA trait for values which cannot be negative000BcCalculate the binomial coefficient.0CnReturns the floating point category of the number. If only \xe2\x80\xa60000000DkReturns a number composed of the magnitude of <code>self</code> and the \xe2\x80\xa60000AhCeiled integer division.AgCeiled integer division101DiConverts a <code>f32</code> to return an optional value of this type. \xe2\x80\xa60000DiConverts a <code>f64</code> to return an optional value of this type. \xe2\x80\xa60000DjConverts an <code>i16</code> to return an optional value of this type. \xe2\x80\xa60000DjConverts an <code>i32</code> to return an optional value of this type. \xe2\x80\xa60000DjConverts an <code>i64</code> to return an optional value of this type. \xe2\x80\xa60000CgCreate a new PRNG seeded from another <code>Rng</code>.0HjParses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of \xe2\x80\xa6CkParses <code>numer/denom</code> or just <code>numer</code>.10DlConvert a &amp;str to <code>OrderedFloat</code>. Returns an error if the \xe2\x80\xa6DmConvert a &amp;str to <code>NotNan</code>. Returns an error if the string \xe2\x80\xa6DjConverts an <code>u16</code> to return an optional value of this type. \xe2\x80\xa60000DjConverts an <code>u32</code> to return an optional value of this type. \xe2\x80\xa60000DjConverts an <code>u64</code> to return an optional value of this type. \xe2\x80\xa60000CnReturn a bool with a probability <code>p</code> of being true.0B`Generate a new block of results.BhAdaptive exact 2D incircle test. Robust.AkReturns the infinite value.0AjReturns positive infinity.10101BhAdaptive exact 3D insphere test. Robust.DeDeconstructs a <code>Ratio</code> into its numerator and denominator.0BaCheck whether the range is empty.AjReturns <code>-0.0</code>.0000000BhReturn the next random <code>u32</code>.0BhReturn the next random <code>u64</code>.0DbReturns the square of the norm (since <code>T</code> doesn\xe2\x80\x99t \xe2\x80\xa60EfReturns the truncated principal <code>n</code>th root of <code>self</code> \xe2\x80\x93 See \xe2\x80\xa6EfReturns the truncated principal <code>n</code>th root of <code>self</code> \xe2\x80\x93 see \xe2\x80\xa6DkReturns the truncated principal <code>n</code>th root of an integer \xe2\x80\x93 \xe2\x80\xa602100BjExternal iterators for generic mathematicsBlAdaptive exact 2D orientation test.  Robust.BkAdaptive exact 3D orientation test. Robust.EmSets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.000EbConverts the value of <code>self</code> to an <code>isize</code>. If the value \xe2\x80\xa60000BoConvert to polar form (r, theta), such that \xe2\x80\xa60EhConverts the value of <code>self</code> to a <code>usize</code>. If the value cannot \xe2\x80\xa60000AjFill self with random dataCmFill any type implementing <code>Fill</code> with random data0BcValidates the following properties:0AkThe Bernoulli distribution.BkAlias for a <code>Complex&lt;f32&gt;</code>0BkAlias for a <code>Complex&lt;f64&gt;</code>0ClDefines an associated constant representing the additive \xe2\x80\xa600DcA marker trait used to indicate that an <code>RngCore</code> or \xe2\x80\xa60AmReturn <code>1.0 / \xcf\x80</code>.00AmReturn <code>2.0 / \xcf\x80</code>.00AmReturn <code>\xcf\x80 / 2.0</code>.00AmReturn <code>\xcf\x80 / 3.0</code>.00AmReturn <code>\xcf\x80 / 4.0</code>.00AmReturn <code>\xcf\x80 / 6.0</code>.00AmReturn <code>\xcf\x80 / 8.0</code>.00ClGeneric trait for floating point numbers that works with \xe2\x80\xa600DhThe trait for <code>Num</code> types which also implement assignment \xe2\x80\xa60DbAn iterator over the infinite range starting at <code>start</code>0DeAn iterator over the range [start, stop) by <code>step</code>. It \xe2\x80\xa60DaA generic trait for converting a value to a <code>BigUint</code>.0EfAn iterator of <code>u32</code> digits representation of a <code>BigUint</code> or \xe2\x80\xa60EfAn iterator of <code>u64</code> digits representation of a <code>BigUint</code> or \xe2\x80\xa60CnAsserts that the first expression is greater than or equal \xe2\x80\xa6CiAsserts that the first expression is greater than the \xe2\x80\xa6CkAsserts that the first expression is less or equal than \xe2\x80\xa6CjAsserts that the first expression is less than the second.DfAsserts that the expression matches an <code>Ok(_)</code> variant, \xe2\x80\xa6BbA value bounded by a maximum value0BbA value bounded by a minimum value0AiFloored integer division.AhFloored integer division101DkConverts an <code>i128</code> to return an optional value of this type. \xe2\x80\xa60000BeInitialize an array given an iteratorBgCreate a new PRNG using the given seed.0DkConverts an <code>u128</code> to return an optional value of this type. \xe2\x80\xa60000BkGenerate a random value in the given range.0DjReturn a bool with a probability of <code>numerator/denominator</code> \xe2\x80\xa60EbReturns <code>true</code> if this number is neither infinite nor <code>NaN</code>.BlChecks if the given complex number is finite111DcReturns <code>true</code> if the number is neither infinite or NaN.212020DfReturns <code>true</code> if the number is neither zero, infinite, \xe2\x80\xa6BlChecks if the given complex number is normal1111101111DkReturns the magnitude of the <code>BigInt</code> as a <code>BigUint</code>.0CiReturns the largest finite number this type can representCgReturns the largest finite value that this type can \xe2\x80\xa610001100011000CjReturns the smallest finite number this type can representChReturns the smallest finite value that this type can \xe2\x80\xa610001100011000BcFloored integer modulo, satisfying:AgFloored integer modulus101AoRandom number generation traitsDaConverts the value of <code>self</code> to a <code>BigInt</code>.0DeReturn the ordering between <code>self</code> and <code>other</code>.0DbA wrapper type implementing <code>RngCore</code> for some type \xe2\x80\xa6DhPerforms addition that returns <code>None</code> instead of wrapping \xe2\x80\xa6000DiPerforms division that returns <code>None</code> instead of panicking \xe2\x80\xa6000DePerforms multiplication that returns <code>None</code> instead of \xe2\x80\xa6000DjPerforms negation that returns <code>None</code> if the result can\xe2\x80\x99t \xe2\x80\xa600DiPerforms an integral remainder that returns <code>None</code> instead \xe2\x80\xa600DiPerforms a left shift that returns <code>None</code> on shifts larger \xe2\x80\xa600DjPerforms a right shift that returns <code>None</code> on shifts larger \xe2\x80\xa600DkPerforms subtraction that returns <code>None</code> instead of wrapping \xe2\x80\xa6000CmAn error indicating an attempt to construct NotNan from a \xe2\x80\xa6ChAlias for a <code>Ratio</code> of 32-bit-sized integers.00ChAlias for a <code>Ratio</code> of 64-bit-sized integers.00DkSaturating math operations. Deprecated, use <code>SaturatingAdd</code>, \xe2\x80\xa6000CdTrait for floating point numbers that provide an \xe2\x80\xa60DhThe back-end implementing <code>UniformSampler</code> for integer types.DjThe <code>array-init</code> crate allows you to initialize arrays with \xe2\x80\xa6CdInitialize an array given an initializer expression.DgAsserts that the expression matches an <code>Err(_)</code> variant, \xe2\x80\xa6ClReturns a mutable reference to one random element of the \xe2\x80\xa6CnReturns the number of ones in the binary representation of \xe2\x80\xa6AoReturns the number of one bits.1101CjCalculates Euclidean division, the matching method for \xe2\x80\xa600BhFill <code>dest</code> with random data.0BhConverts a float into a rational number.0DfConverts an <code>isize</code> to return an optional value of this \xe2\x80\xa60000CeConvert a polar representation into a complex number.0DjConstruct a new <code>Bernoulli</code> with the probability of success \xe2\x80\xa6BnCreates and initializes a <code>BigInt</code>.BoCreates and initializes a <code>BigUint</code>.10DkConverts a <code>usize</code> to return an optional value of this type. \xe2\x80\xa60000AbGet the value out.0FcConvert this <code>BigInt</code> into its <code>Sign</code> and <code>BigUint</code> magnitude, \xe2\x80\xa60CeReturns true if the rational number is an integer \xe2\x80\xa60AjBig Integer Types for RustBfNumeric traits for generic mathematicsCjReturn an iterator over the infinite range starting at \xe2\x80\xa60DiReturn an iterator over the range [start, stop) by <code>step</code>. \xe2\x80\xa600DhCalculates the least nonnegative remainder of <code>self (mod v)</code>.00DfShifts the bits to the left by a specified amount, <code>n</code>, \xe2\x80\xa6000DgShifts the bits to the right by a specified amount, <code>n</code>, \xe2\x80\xa6000BgReverses the byte order of the integer.000E`Converts this <code>BigInt</code> into a <code>BigUint</code>, if it\xe2\x80\x99s not \xe2\x80\xa6DbConverts the value of <code>self</code> to a <code>BigUint</code>.01AlConverts radians to degrees.0CgConverts to degrees, assuming the number is in radians.1101101BnConverts to an integer, rounding towards zero.0AlConverts degrees to radians.0CgConverts to radians, assuming the number is in degrees.1101101CkA generic interface for casting between machine scalars \xe2\x80\xa6000BhAlias for arbitrary precision rationals.00C`Greatest common divisor and B\xc3\xa9zout coefficients0CkRange that supports generating a single sample efficiently.ChA random number generator that can be explicitly seeded.0ClExtension trait on slices, providing random mutation and \xe2\x80\xa6CcA generic trait for converting a value to a number.0000DlThe back-end implementing <code>UniformSampler</code> for <code>char</code>.C`Performs addition that wraps around on overflow.00CfPerforms multiplication that wraps around on overflow.00BhPerforms a negation that does not panic.00BjPerforms a left shift that does not panic.00BkPerforms a right shift that does not panic.00CcPerforms subtraction that wraps around on overflow.00CaAsserts that the expression is <code>None</code>.DgAsserts that the expression matches a <code>Some(_)</code> variant, \xe2\x80\xa6ChAdds two numbers, checking for overflow. If overflow \xe2\x80\xa6000CmDivides two numbers, checking for underflow, overflow and \xe2\x80\xa6000CeMultiplies two numbers, checking for underflow or \xe2\x80\xa6000DjNegates a number, returning <code>None</code> for results that can\xe2\x80\x99t \xe2\x80\xa600DiRaises a value to the power of exp, returning <code>None</code> if an \xe2\x80\xa60000CmFinds the remainder of dividing two numbers, checking for \xe2\x80\xa600ElChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> \xe2\x80\xa600EmChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> \xe2\x80\xa600CeSubtracts two numbers, checking for underflow. If \xe2\x80\xa6000AoConvex hull of a set of points.00ClReturns the number of zeros in the binary representation \xe2\x80\xa6000DcReturns <code>true</code> if this value is positive infinity or \xe2\x80\xa6BnChecks if the given complex number is infinite111CdReturns <code>true</code> if the number is infinite.212020CkReturns true if the number is negative and false if the \xe2\x80\xa6000CkReturns true if the number is positive and false if the \xe2\x80\xa6000BfCalculate the multinomial coefficient.0A`Complex numbers.AlInteger trait and functions.BnCreates and initializes a <code>BigInt</code>.DhCreates and initializes a <code>BigUint</code>. The input slice must \xe2\x80\xa610DfShifts the bits to the left by a specified amount, <code>n</code>, \xe2\x80\xa6000ClCreate an iterator that generates values using the given \xe2\x80\xa60DfCreate an iterator that generates random values of <code>T</code>, \xe2\x80\xa60ChComputes the area of a polygon. If the polygon winds \xe2\x80\xa6CmReturn the memory representation of this number as a byte \xe2\x80\xa600DkReturns the sign and the byte representation of the <code>BigInt</code> \xe2\x80\xa6DbReturns the byte representation of the <code>BigUint</code> in \xe2\x80\xa6101010222222CkReturns the integer in the requested base in big-endian \xe2\x80\xa6000CnReturns the integer in the requested base in little-endian \xe2\x80\xa6000DjSample a <code>u8</code>, uniformly distributed over ASCII letters and \xe2\x80\xa6CiA trait for RNGs which do not generate random numbers \xe2\x80\xa6ChCodes at or above this point can be used by users to \xe2\x80\xa60CaGeneric trait for floating point complex numbers.0CmTypes (distributions) that can be used to create a random \xe2\x80\xa6BgAn iterator over binomial coefficients.0AoNumbers which have lower bounds0BoThe fused multiply-add assignment operation \xe2\x80\xa600CkGeneric trait for types implementing numeric assignment \xe2\x80\xa60DcThe trait for <code>NumAssign</code> types which also implement \xe2\x80\xa60CmA distribution to sample floating point numbers uniformly \xe2\x80\xa6DiA wrapper around floats providing implementations of <code>Eq</code>, \xe2\x80\xa6DhHelper trait similar to <code>Borrow</code> but implemented only for \xe2\x80\xa6CmThe back-end implementing <code>UniformSampler</code> for \xe2\x80\xa6AoNumbers which have upper bounds0DjLocate <code>p2</code> in relation to the line determined by the point \xe2\x80\xa6DkAsserts that the left expression contains an <code>Ok(T)</code> variant \xe2\x80\xa6DeAsserts that the expression matches a <code>Poll::Ready(_)</code> \xe2\x80\xa6EbReturns the ceil value of the average of <code>self</code> and <code>other</code>.0EeReturns the ceiling value of the average of <code>x</code> and <code>y</code> \xe2\x80\x93 \xe2\x80\xa6EeReturns the ceiling value of the average of <code>self</code> and <code>other</code>.2210CaGreatest common divisor and B\xc3\xa9zout coefficients.00BnCreates and initializes a <code>BigInt</code>.0DeCreates a <code>Ratio</code> representing the integer <code>t</code>.0CeReturns <code>true</code> if the number is subnormal.0000000CdReturns the number of leading ones in the binary \xe2\x80\xa6000BdReturns the negative infinite value.0AjReturns negative infinity.10101A`Rational numbersCnExtract the raw OS error code (if this error came from the \xe2\x80\xa60BjReverses the order of bits in the integer.000DgShifts the bits to the right by a specified amount, <code>n</code>, \xe2\x80\xa6000CjReturns the integer formatted as a string in the given \xe2\x80\xa6000DfShifts the bits to the left by a specified amount, <code>n</code>, \xe2\x80\xa60002222DdWrapping (modular) addition. Computes <code>self + other</code>, \xe2\x80\xa600DjWrapping (modular) multiplication. Computes <code>self * other</code>, \xe2\x80\xa600DfWrapping (modular) negation. Computes <code>-self</code>, wrapping \xe2\x80\xa600DoPanic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, \xe2\x80\xa600E`Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, \xe2\x80\xa600DgWrapping (modular) subtraction. Computes <code>self - other</code>, \xe2\x80\xa600BdReturn <code>1.0 / sqrt(2.0)</code>.00CcA generic trait for converting a number to a value.0000DiAn iterator over the infinite range starting at <code>start</code> by \xe2\x80\xa60CgHelper trait for creating objects using the correct \xe2\x80\xa6CjPerforms addition that saturates at the numeric bounds \xe2\x80\xa600CiPerforms multiplication that saturates at the numeric \xe2\x80\xa600CmPerforms subtraction that saturates at the numeric bounds \xe2\x80\xa600DdAsserts that the left expression contains an <code>Err(E)</code> \xe2\x80\xa6EcReturns the floor value of the average of <code>self</code> and <code>other</code>.0EgReturns the floor value of the average of <code>x</code> and <code>y</code> \xe2\x80\x93 see \xe2\x80\xa6EgReturns the floor value of the average of <code>self</code> and <code>other</code>. \xe2\x80\xa62210BoChoose one element at random from the iterator.ChGenerating random samples from probability distributionsCnSimultaneous floored integer division and modulus. Returns \xe2\x80\xa6CaSimultaneous floored integer division and modulus101AdSums two expansions.CnCreate a number from its representation as a byte array in \xe2\x80\xa600BnCreates and initializes a <code>BigInt</code>.BoCreates and initializes a <code>BigUint</code>.101010222ClCreate a number from its memory representation as a byte \xe2\x80\xa600EdCreates and initializes a <code>BigInt</code>. Each <code>u8</code> of the input \xe2\x80\xa6EeCreates and initializes a <code>BigUint</code>. Each <code>u8</code> of the input \xe2\x80\xa6101010CgApproximate 2D incircle test. Non-robust version of \xe2\x80\xa6CgApproximate 3D insphere test. Non-robust version of \xe2\x80\xa6ClExtract the original value, if available. The value will \xe2\x80\xa60CeReturns the number of leading zeros in the binary \xe2\x80\xa6000CoConstruct self, with inclusive bounds <code>[low, high]</code>.DkCreate a new <code>Uniform</code> instance which samples uniformly from \xe2\x80\xa6DiCreate a <code>NotNan</code> value from a value that is guaranteed to \xe2\x80\xa6B`Assume that a polygon is convex.f$O(1)$DjWrappers for total order on Floats.  See the <code>OrderedFloat</code> \xe2\x80\xa6CjApproximate 2D orientation test. Non-robust version of \xe2\x80\xa6CjApproximate 3D orientation test. Non-robust version of \xe2\x80\xa6DkReads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.DkReads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.BgGenerate a sample from the given range.CeSample a single value uniformly from a range with \xe2\x80\xa6C`Create a new PRNG using a <code>u64</code> seed.0DjReturns the sign and the <code>u32</code> digits representation of the \xe2\x80\xa6EbReturns the <code>u32</code> digits representation of the <code>BigUint</code> \xe2\x80\xa610DjReturns the sign and the <code>u64</code> digits representation of the \xe2\x80\xa6EbReturns the <code>u64</code> digits representation of the <code>BigUint</code> \xe2\x80\xa610CeReturns the number of trailing ones in the binary \xe2\x80\xa6CkReturns the number of least-significant bits that are ones.1101CmGenerate a valid polygon by connecting a set of points in \xe2\x80\xa6DiCreate a <code>NotNan</code> value from a value that is guaranteed to \xe2\x80\xa6CeError type returned from <code>Bernoulli::new</code>.BcReturn <code>2.0 / sqrt(\xcf\x80)</code>.00CmCodes below this point represent OS Errors (i.e. positive \xe2\x80\xa60CkExtension trait on iterators, providing random sampling \xe2\x80\xa6BkPerforms addition with a flag for overflow.0CaPerforms multiplication with a flag for overflow.0BoPerforms substraction with a flag for overflow.0DhThe built-in floating point types <code>f32</code> and <code>f64</code>.BhAn iterator over the range [start, stop]0BnHelper trait handling actual uniform sampling.CiAsserts that the expression matches the provided pattern.DdAsserts that the expression matches a <code>Poll::Pending</code> \xe2\x80\xa6DdAsserts that the left expression contains a <code>Some(T)</code> \xe2\x80\xa6eDocs?CjReturns both the quotient and remainder from Euclidean \xe2\x80\xa600Ch$O(n)$ Polygon triangulation. Ears are selected in a \xe2\x80\xa6D`Convert from a string and radix (typically <code>2..=36</code>).BnCreates and initializes a <code>BigInt</code>.HjParses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of \xe2\x80\xa6BoCreates and initializes a <code>BigUint</code>.3EaParses <code>numer/denom</code> where the numbers are in base <code>radix</code>.31204AnAdds a scalar to an expansion.CfReturns the mantissa, base 2 exponent, and sign as \xe2\x80\xa60000000EcReturns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.DlReturns <code>true</code> if the number is a multiple of <code>other</code>.01001CjInitialize an array given a source array and a mapping \xe2\x80\xa6ChPerforms the fused multiply-add assignment operation \xe2\x80\xa600ClSaturating addition operator. Returns a+b, saturating at \xe2\x80\xa60DjSaturating addition. Computes <code>self + other</code>, saturating at \xe2\x80\xa61010DbSaturating multiplication. Computes <code>self * other</code>, \xe2\x80\xa600ClSaturating subtraction operator. Returns a-b, saturating \xe2\x80\xa60DjSaturating subtraction. Computes <code>self - other</code>, saturating \xe2\x80\xa61010CnCompute double the area of a polygon. If the polygon winds \xe2\x80\xa6CfReturns the number of trailing zeros in the binary \xe2\x80\xa6CkReturns the number of least-significant bits that are zero,011001ClInitialize an array given an initializer expression that \xe2\x80\xa6CaFill <code>dest</code> entirely with random data.0ChTwo consecutive line segments are either colinear or \xe2\x80\xa6CcA plain parse error from the underlying float type.E`The back-end implementing <code>UniformSampler</code> for <code>Duration</code>.DkAsserts that the left expression contains a [<code>Poll::Ready(T)</code>\xe2\x80\xa6DkAsserts that the expression matches a [<code>Poll::Ready(Ok(_))</code>] \xe2\x80\xa6CdBentley\xe2\x80\x93Ottmann sweep-line intersection detection.CnAsserts that the first expression is greater than or equal \xe2\x80\xa6CiAsserts that the first expression is greater than the \xe2\x80\xa6CkAsserts that the first expression is less or equal than \xe2\x80\xa6CmAsserts that the first expression is less than the second \xe2\x80\xa6DhAsserts that the expression matches an <code>Ok(_)</code> variant on \xe2\x80\xa6DhReturns an iterator of <code>u32</code> digits representation of the \xe2\x80\xa6000DhReturns an iterator of <code>u64</code> digits representation of the \xe2\x80\xa6000CnReturns a tuple of the sum along with a boolean indicating \xe2\x80\xa60CgReturns a tuple of the product along with a boolean \xe2\x80\xa60CjReturns a tuple of the difference along with a boolean \xe2\x80\xa60BiShuffle a slice in place, but exit early.BoReturn an iterator over the range [start, stop]00CjReturn an iterator over the infinite range starting at \xe2\x80\xa60DhAn error indicating a parse error from a string for <code>NotNan</code>.DjAsserts that the expression matches a <code>Poll::Ready(Err(_))</code> \xe2\x80\xa6DiAsserts that the expression matches an <code>Err(_)</code> variant in \xe2\x80\xa6CgGreatest common divisor, least common multiple, and \xe2\x80\xa60000CjGenerate a new set of results immediately, setting the \xe2\x80\xa60ElReturns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, \xe2\x80\xa600EoReturns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and \xe2\x80\xa6110110ElReturns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, \xe2\x80\xa600EoReturns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and \xe2\x80\xa6110110BjRounds up to nearest multiple of argument.000000DoImplement <code>next_u64</code> via <code>next_u32</code>, little-endian order.BlRounds down to nearest multiple of argument.000000BdReinitializes a <code>BigInt</code>.BiAssign a value to a <code>BigUint</code>.10DaAsserts that the expression is <code>None</code> on debug builds.DiAsserts that the expression matches a <code>Some(_)</code> variant on \xe2\x80\xa6EaImplement <code>next_u32</code> via <code>fill_bytes</code>, little-endian order.EaImplement <code>next_u64</code> via <code>fill_bytes</code>, little-endian order.Bo<code>p &lt; 0</code> or <code>p &gt; 1</code>.DeAn iterator over the range [start, stop] by <code>step</code>. It \xe2\x80\xa60CeThe error type returned when a checked conversion \xe2\x80\xa60DfPerforms euclid division that returns <code>None</code> instead of \xe2\x80\xa600CgFinds the euclid remainder of dividing two numbers, \xe2\x80\xa600DkAsserts that the left expression contains an <code>Ok(T)</code> variant \xe2\x80\xa6DeAsserts that the expression matches a <code>Poll::Ready(_)</code> \xe2\x80\xa6C`Initialize an array in reverse given an iteratorCmReturns the smallest positive, normalized value that this \xe2\x80\xa6000000000CmReturns the two\xe2\x80\x99s-complement byte representation of the \xe2\x80\xa6000DdAsserts that the left expression contains an <code>Err(E)</code> \xe2\x80\xa6EjImplement <code>fill_bytes</code> via <code>next_u64</code> and <code>next_u32</code>, \xe2\x80\xa6DgImplement <code>fill_bytes</code> by reading chunks from the output \xe2\x80\xa60CjA safe Rust port of the robust adaptive floating-point \xe2\x80\xa6CfCollects values at random from the iterator into a \xe2\x80\xa6ClAsserts that the expression matches the provided pattern \xe2\x80\xa6DdAsserts that the expression matches a <code>Poll::Pending</code> \xe2\x80\xa6DdAsserts that the left expression contains a <code>Some(T)</code> \xe2\x80\xa6DkCreates and initializes a <code>BigInt</code> from an array of bytes in \xe2\x80\xa6000CgGenerates a monotone polygon from given points with \xe2\x80\xa6DiReturn an iterator over the range [start, stop] by <code>step</code>. \xe2\x80\xa600DhSame as <code>two_product</code> where one of the inputs has already \xe2\x80\xa6DkAsserts that the left expression contains a <code>Poll::Ready(T)</code> \xe2\x80\xa6DiAsserts that the expression matches a <code>Poll::Ready(Ok(_))</code> \xe2\x80\xa6BdFind all line segment intersections.0BoFind all line segment intersections using a \xe2\x80\xa6DjSame as <code>two_product</code> where both of the inputs have already \xe2\x80\xa6ChReturns both the quotient and remainder from checked \xe2\x80\xa600DjAsserts that the expression matches a <code>Poll::Ready(Err(_))</code> \xe2\x80\xa6CbNaive alogrithn for calculating visibility polygonCmSums two expansions, eliminating zero components from the \xe2\x80\xa60CnAdds a scalar to an expansion, eliminating zero components \xe2\x80\xa6CeSample a single value uniformly from a range with \xe2\x80\xa6CgMultiply an expansion by a scalar, eliminating zero \xe2\x80\xa63")