searchState.loadedDescShard("ordered_float", 0, "Wrappers for total order on Floats.  See the <code>OrderedFloat</code> …\nGeneric trait for floating point numbers\nGeneric trait for floating point numbers that works with …\nAn error indicating an attempt to construct NotNan from a …\nThe parsed float value resulted in a NaN.\nA wrapper around floats providing an implementation of <code>Eq</code>, …\nA wrapper around floats providing implementations of <code>Eq</code>, …\nThe result after applying the operator.\nA plain parse error from the underlying float type.\nAn error indicating a parse error from a string for <code>NotNan</code>.\nBinary operator for raising a value to a power.\nComputes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …\nComputes the absolute value of <code>self</code>. Returns …\nThe positive difference of two numbers.\nComputes the arccosine of a number. Return value is in …\nInverse hyperbolic cosine function.\nConverts this <code>NotNan</code><code>&lt;</code><code>f64</code><code>&gt;</code> to a <code>NotNan</code><code>&lt;</code><code>f32</code><code>&gt;</code> while giving up …\nComputes the arcsine of a number. Return value is in …\nInverse hyperbolic sine function.\nComputes the arctangent of a number. Return value is in …\nComputes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…\nInverse hyperbolic tangent function.\nTake the cubic root of a number.\nReturns the smallest integer greater than or equal to a …\nReturns the smallest integer greater than or equal to a …\nA value bounded by a minimum and a maximum\nClamps a value between a min and max.\nReturns the floating point category of the number. If only …\nReturns the floating point category of the number. If only …\nReturns a number composed of the magnitude of <code>self</code> and the …\nComputes the cosine of a number (in radians).\nHyperbolic cosine function.\nReturns epsilon, a small positive value.\nReturns epsilon, a small positive value.\nReturns <code>e^(self)</code>, (the exponential function).\nReturns <code>2^(self)</code>.\nReturns <code>e^(self) - 1</code> in a way that is accurate even if the …\nReturns the largest integer less than or equal to a number.\nReturns the largest integer less than or equal to a number.\nReturns the fractional part of a number.\nReturns the fractional part of a number.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a &amp;str to <code>OrderedFloat</code>. Returns an error if the …\nConvert a &amp;str to <code>NotNan</code>. Returns an error if the string …\nCalculate the length of the hypotenuse of a right-angle …\nReturns positive infinity.\nReturns the infinite value.\nReturns the mantissa, base 2 exponent, and sign as …\nReturns the mantissa, base 2 exponent, and sign as …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the value out.\nGet the value out.\nReturns <code>true</code> if this number is neither infinite nor <code>NaN</code>.\nReturns <code>true</code> if the number is neither infinite or NaN.\nReturns <code>true</code> if this value is positive infinity or …\nReturns <code>true</code> if the number is infinite.\nReturns <code>true</code> if this value is <code>NaN</code> and false otherwise.\nReturns <code>true</code> if the number is NaN.\nReturns <code>true</code> if the number is neither zero, infinite, …\nReturns <code>true</code> if the number is neither zero, infinite, …\nReturns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …\nReturns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …\nReturns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …\nReturns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …\nReturns <code>true</code> if the number is subnormal.\nReturns <code>true</code> if the number is subnormal.\nReturns the natural logarithm of the number.\nReturns <code>ln(1+n)</code> (natural logarithm) more accurately than if\nReturns the logarithm of the number with respect to an …\nReturns the base 10 logarithm of the number.\nReturns the base 2 logarithm of the number.\nReturns the maximum of the two numbers.\nReturns the maximum of the two numbers.\nReturns the largest finite value that this type can …\nReturns the largest finite value that this type can …\nReturns the minimum of the two numbers.\nReturns the minimum of the two numbers.\nReturns the smallest positive, normalized value that this …\nReturns the smallest positive, normalized value that this …\nReturns the smallest finite value that this type can …\nReturns the smallest finite value that this type can …\nFused multiply-add. Computes <code>(self * a) + b</code> with only one …\nReturns NaN.\nReturns the <code>NaN</code> value.\nReturns negative infinity.\nReturns the negative infinite value.\nReturns <code>-0.0</code>.\nReturns <code>-0.0</code>.\nCreate a <code>NotNan</code> value.\nCreate a <code>NotNan</code> value from a value that is guaranteed to …\nReturns <code>self</code> to the power <code>rhs</code>.\nRaise a number to a floating point power.\nRaise a number to an integer power.\nRaise a number to an integer power.\nTake the reciprocal (inverse) of a number, <code>1/x</code>.\nReturns the reciprocal (multiplicative inverse) of the …\nReturns the nearest integer to a number. Round half-way …\nReturns the nearest integer to a number. Round half-way …\nReturns a number that represents the sign of <code>self</code>.\nReturns a number that represents the sign of <code>self</code>.\nComputes the sine of a number (in radians).\nSimultaneously computes the sine and cosine of the number, …\nHyperbolic sine function.\nTake the square root of a number.\nComputes the tangent of a number (in radians).\nHyperbolic tangent function.\nConverts to degrees, assuming the number is in radians.\nConverts radians to degrees.\nConverts to radians, assuming the number is in degrees.\nConverts degrees to radians.\nReturn the integer part of a number.\nReturn the integer part of a number.\nCreate a <code>NotNan</code> value from a value that is guaranteed to …")